name: Deploy to EKS # Name of Workflow
env: # A map of environment variables that are available to all jobs and steps in the workflow
  APPLICATION_NAME : "alco24"
  PACKAGE_NAME     : "alco24-deploy-ver-${{ github.sha }}" # github.sha - current running commit's hash (Everytime when you make a commit to save your work, Git creates a unique ID (a.k.a. the "SHA" or "hash") that allows you to keep record under that hash)

on: # Setting trigger for running this workflow : Our Case this workflow will runs everytime when we will make push to main branch of this repository
  push:
    branches:
      - main
# Starting Definening jobs
jobs:
  deploy: # Defining Name of job(s)
    runs-on: ubuntu-latest # ubuntu-latest : The type of vistual host machine to run the job on` (docekr image (In Github docker image called runner))
    
    steps: # Steps are collection of commands in job
    # Step 1: Checkout code : Copying code from branch into Github's vistual host machine on ubuntu-latest.
    - name: Checkout code # Name of step
      uses: actions/checkout@v2  #uses: Selects an action to run as part of a step in job

    # Step 2: Set up AWS credentials using OIDC : Configuring access to our AWS account in Github's ubuntu-latest enviornment
    - name: Configure AWS credentials # Name of step
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::<AWS_ACCOUNT_ID>:role/<GITHUB_OIDC_ROLE>
        role-session-name: github-actions
        aws-region: <AWS_REGION>

    # Step 3: Set up Docker and push the image to ECR (if not already pushed)
    - name: Log in to Amazon ECR # Name of step
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      run: | # Runs the command line programs using the operating system's shell. Pipe (|) allows run multiple commands in one step
        docker build -t <ECR_REPO_URI>:latest .
        docker push <ECR_REPO_URI>:latest

    # Step 4: Update kubeconfig to interact with EKS
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name <EKS_CLUSTER_NAME> --region <AWS_REGION> 

    # Step 5: Deploy the app to EKS
    - name: Deploy to EKS
      run: kubectl apply -f k8s/deployment.yaml 
  
  message:
    runs-on: ubuntu-latest
    needs  : [deploy] # Idnetifies any jobs that must complete successfully before this job run` dependency

    steps:

      - name: Deployments Status Message
        run : echo "${{ env.APPLICATION_NAME }} Successfully Deployed"

      - name: Package Name
        run : echo "Deploy Package Name is ${{ env.PACKAGE_NAME }}"
        


      
