name: Deploy to EKS (Reusable) # Name of Workflow
on: # Setting trigger for running this workflow : Our Case this workflow will runs everytime when we will make push to main branch of this repository
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to (e.g., dev, prod)'
        required: true
        type: string
      ecr_repo_name:
        description: 'The name of the Private ECR repository'
        required: true
        type: string
      role_session_name:
        description: 'IAM Role Session name'
        required: true
        type: string
      application_name:
        description: 'Name of App'
        required: true
        type: string
      eks_cluster_name:
        description: 'Name of EKS Cluster'
        required: true
        type: string
      skip_deploy_steps:
        description: 'If true, skips the kubeconfig and kubectl apply steps'
        required: false
        default: false
        type: boolean
    secrets:
      AWS_ROLE_ARN:
        required: true
      AWS_REGION:
        required: true

permissions:
  id-token: write       # üîê Needed for OIDC (AWS/GCP auth)
  contents: read        # üìÅ Usually required for checking out the repo
  
# Starting Definening jobs
jobs:
  deploy: # Defining Name of job(s)
    runs-on: ubuntu-latest # ubuntu-latest : The type of vistual host machine to run the job on` (docekr image (In Github docker image called runner))

    steps: # Steps are collection of commands in job
    # Step 1: Checkout code : Copying code from branch into Github's vistual host machine on ubuntu-latest.
    - name: Checkout code # Name of step
      uses: actions/checkout@v2  #uses: Selects an action to run as part of a step in job

    # Step 2: Set up AWS credentials using OIDC : Configuring access to our AWS account in Github's ubuntu-latest enviornment
    - name: Configure AWS credentials # Name of step
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume    : ${{ secrets.AWS_ROLE_ARN }}
        role-session-name : ${{ inputs.role_session_name }}
        aws-region        : ${{ secrets.AWS_REGION }}

    # Step 3: Set up Docker and push the image to ECR (if not already pushed)
    - name: Log in to Amazon ECR # Name of step
      id  : login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      env:
          REGISTRY  : ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.ecr_repo_name }}
          IMAGE_TAG : ${{ github.sha }}
      run: | # Runs the command line programs using the operating system's shell. Pipe (|) allows run multiple commands in one step
          docker build -t $REGISTRY/${{ inputs.application_name }}-$REPOSITORY:$IMAGE_TAG ./app/front
          docker push $REGISTRY/${{ inputs.application_name }}-$REPOSITORY:$IMAGE_TAG

    # Step 4: Update kubeconfig to interact with EKS
    - name: Update kubeconfig
      if: ${{ inputs.skip_deploy_steps != true }}
      run : aws eks update-kubeconfig --name ${{ inputs.eks_cluster_name }} --region ${{ secrets.AWS_REGION }} 

    # Step 5: Deploy the app to EKS
    - name: Deploy to EKS
      if: ${{ inputs.skip_deploy_steps != true }}
      run : kubectl apply -f k8s/deployment.yaml 
  
  
